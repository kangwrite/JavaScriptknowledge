1、浏览器强制缓存
Expires为HTTP1.0的内容，现在浏览器默认HTTP1.1，可以通过cache-control来查看。
Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。
private:             客户端可以缓存
public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）
max-age=xxx:         缓存的内容将在 xxx 秒后失效
no-cache:            需要使用对比缓存来验证缓存数据（后面介绍）
no-store:            所有内容都不会缓存，强制缓存，对比缓存都不会触发

from disk cache  和 from memory cache目前看是chrome的自有属性，ff会直接显示已缓存

2、浏览器对比缓存
（1）Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）
第一次请求时，server返回资源唯一标识Etag；
再次请求服务器时，请求头发送If-None-Match将唯一标识发送给server，通过此字段通知服务器客户段缓存数据的唯一标识。
服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，
不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；
相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache

（2）Last-Modified  /  If-Modified-Since
浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。
再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据

第一次请求时，server返回数据的  last-modified 时间；
再次请求服务器时，在请求头中将第一次获取到的最后修改时间发送给server，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。
服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。
若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；
若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache
